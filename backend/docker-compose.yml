services:
  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    ports:
      - "8001:8000"
    environment:
      - ENV=dev
      - DATABASE_URL=postgresql+asyncpg://clouduser:cloudpass@postgres:5432/user_db
    command: >
      sh -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8000"
    depends_on:
      - postgres
  file-service:
    build:
      context: .
      dockerfile: file-service/Dockerfile
    ports:
      - "8002:8000"
    environment:
      - ENV=dev
      - DATABASE_URL=postgresql+asyncpg://clouduser:cloudpass@postgres:5432/file_db
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET}
    volumes:
      - ./file-service/alembic/versions:/app/file-service/alembic/versions
    command: >
      sh -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8000"
    depends_on:
      - postgres
  virus-scan-service:
    build:
      context: .
      dockerfile: virus-scan-service/Dockerfile
    ports:
      - "8003:8000"
    environment:
      - ENV=dev
  gateway:
    build: ./gateway
    ports:
      - "8000:8000"
    environment:
      - ENV=dev
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: clouduser
      POSTGRES_PASSWORD: cloudpass
      POSTGRES_DB: user_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    command: ["postgres", "-c", "shared_preload_libraries=pgcrypto"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clouduser -d user_db && pg_isready -U clouduser -d file_db"]
      interval: 60s
      timeout: 5s
      retries: 3
    # Создание второй базы file_db при старте
    entrypoint: ["/bin/sh", "-c", "docker-entrypoint.sh postgres & sleep 5 && (psql -U clouduser -d user_db -tc \"SELECT 1 FROM pg_database WHERE datname = 'file_db'\" | grep -q 1 || psql -U clouduser -d user_db -c 'CREATE DATABASE file_db;') && wait"]
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
  clamav:
    image: clamav/clamav:latest
    ports:
      - "3310:3310"
volumes:
  pgdata:
  minio-data:
